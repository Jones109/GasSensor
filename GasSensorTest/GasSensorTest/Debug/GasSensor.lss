
GasSensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800200  00000cac  00000d20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000d78  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000da8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  00000de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000155b  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001077  00000000  00000000  0000241b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000088b  00000000  00000000  00003492  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000244  00000000  00000000  00003d20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006e2  00000000  00000000  00003f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000071a  00000000  00000000  00004646  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00004d60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	b2 c0       	rjmp	.+356    	; 0x166 <__ctors_end>
   2:	00 00       	nop
   4:	c7 c0       	rjmp	.+398    	; 0x194 <__bad_interrupt>
   6:	00 00       	nop
   8:	c5 c0       	rjmp	.+394    	; 0x194 <__bad_interrupt>
   a:	00 00       	nop
   c:	c3 c0       	rjmp	.+390    	; 0x194 <__bad_interrupt>
   e:	00 00       	nop
  10:	c1 c0       	rjmp	.+386    	; 0x194 <__bad_interrupt>
  12:	00 00       	nop
  14:	bf c0       	rjmp	.+382    	; 0x194 <__bad_interrupt>
  16:	00 00       	nop
  18:	bd c0       	rjmp	.+378    	; 0x194 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	bb c0       	rjmp	.+374    	; 0x194 <__bad_interrupt>
  1e:	00 00       	nop
  20:	b9 c0       	rjmp	.+370    	; 0x194 <__bad_interrupt>
  22:	00 00       	nop
  24:	b7 c0       	rjmp	.+366    	; 0x194 <__bad_interrupt>
  26:	00 00       	nop
  28:	b5 c0       	rjmp	.+362    	; 0x194 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	b3 c0       	rjmp	.+358    	; 0x194 <__bad_interrupt>
  2e:	00 00       	nop
  30:	b1 c0       	rjmp	.+354    	; 0x194 <__bad_interrupt>
  32:	00 00       	nop
  34:	af c0       	rjmp	.+350    	; 0x194 <__bad_interrupt>
  36:	00 00       	nop
  38:	ad c0       	rjmp	.+346    	; 0x194 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ab c0       	rjmp	.+342    	; 0x194 <__bad_interrupt>
  3e:	00 00       	nop
  40:	a9 c0       	rjmp	.+338    	; 0x194 <__bad_interrupt>
  42:	00 00       	nop
  44:	a7 c0       	rjmp	.+334    	; 0x194 <__bad_interrupt>
  46:	00 00       	nop
  48:	a5 c0       	rjmp	.+330    	; 0x194 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	a3 c0       	rjmp	.+326    	; 0x194 <__bad_interrupt>
  4e:	00 00       	nop
  50:	a1 c0       	rjmp	.+322    	; 0x194 <__bad_interrupt>
  52:	00 00       	nop
  54:	9f c0       	rjmp	.+318    	; 0x194 <__bad_interrupt>
  56:	00 00       	nop
  58:	9d c0       	rjmp	.+314    	; 0x194 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	9b c0       	rjmp	.+310    	; 0x194 <__bad_interrupt>
  5e:	00 00       	nop
  60:	99 c0       	rjmp	.+306    	; 0x194 <__bad_interrupt>
  62:	00 00       	nop
  64:	97 c0       	rjmp	.+302    	; 0x194 <__bad_interrupt>
  66:	00 00       	nop
  68:	95 c0       	rjmp	.+298    	; 0x194 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	93 c0       	rjmp	.+294    	; 0x194 <__bad_interrupt>
  6e:	00 00       	nop
  70:	91 c0       	rjmp	.+290    	; 0x194 <__bad_interrupt>
  72:	00 00       	nop
  74:	8f c0       	rjmp	.+286    	; 0x194 <__bad_interrupt>
  76:	00 00       	nop
  78:	8d c0       	rjmp	.+282    	; 0x194 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	8b c0       	rjmp	.+278    	; 0x194 <__bad_interrupt>
  7e:	00 00       	nop
  80:	89 c0       	rjmp	.+274    	; 0x194 <__bad_interrupt>
  82:	00 00       	nop
  84:	87 c0       	rjmp	.+270    	; 0x194 <__bad_interrupt>
  86:	00 00       	nop
  88:	85 c0       	rjmp	.+266    	; 0x194 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	83 c0       	rjmp	.+262    	; 0x194 <__bad_interrupt>
  8e:	00 00       	nop
  90:	81 c0       	rjmp	.+258    	; 0x194 <__bad_interrupt>
  92:	00 00       	nop
  94:	7f c0       	rjmp	.+254    	; 0x194 <__bad_interrupt>
  96:	00 00       	nop
  98:	7d c0       	rjmp	.+250    	; 0x194 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	7b c0       	rjmp	.+246    	; 0x194 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	79 c0       	rjmp	.+242    	; 0x194 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	77 c0       	rjmp	.+238    	; 0x194 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	75 c0       	rjmp	.+234    	; 0x194 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	73 c0       	rjmp	.+230    	; 0x194 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	71 c0       	rjmp	.+226    	; 0x194 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	6f c0       	rjmp	.+222    	; 0x194 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	6d c0       	rjmp	.+218    	; 0x194 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	6b c0       	rjmp	.+214    	; 0x194 <__bad_interrupt>
  be:	00 00       	nop
  c0:	69 c0       	rjmp	.+210    	; 0x194 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	67 c0       	rjmp	.+206    	; 0x194 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	65 c0       	rjmp	.+202    	; 0x194 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	63 c0       	rjmp	.+198    	; 0x194 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	61 c0       	rjmp	.+194    	; 0x194 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	5f c0       	rjmp	.+190    	; 0x194 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	5d c0       	rjmp	.+186    	; 0x194 <__bad_interrupt>
  da:	00 00       	nop
  dc:	5b c0       	rjmp	.+182    	; 0x194 <__bad_interrupt>
  de:	00 00       	nop
  e0:	59 c0       	rjmp	.+178    	; 0x194 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	07 63       	ori	r16, 0x37	; 55
  e6:	42 36       	cpi	r20, 0x62	; 98
  e8:	b7 9b       	sbis	0x16, 7	; 22
  ea:	d8 a7       	std	Y+40, r29	; 0x28
  ec:	1a 39       	cpi	r17, 0x9A	; 154
  ee:	68 56       	subi	r22, 0x68	; 104
  f0:	18 ae       	std	Y+56, r1	; 0x38
  f2:	ba ab       	std	Y+50, r27	; 0x32
  f4:	55 8c       	ldd	r5, Z+29	; 0x1d
  f6:	1d 3c       	cpi	r17, 0xCD	; 205
  f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
  fa:	57 63       	ori	r21, 0x37	; 55
  fc:	bd 6d       	ori	r27, 0xDD	; 221
  fe:	ed fd       	.word	0xfded	; ????
 100:	75 3e       	cpi	r23, 0xE5	; 229
 102:	f6 17       	cp	r31, r22
 104:	72 31       	cpi	r23, 0x12	; 18
 106:	bf 00       	.word	0x00bf	; ????
 108:	00 00       	nop
 10a:	80 3f       	cpi	r24, 0xF0	; 240
 10c:	08 00       	.word	0x0008	; ????
 10e:	00 00       	nop
 110:	be 92       	st	-X, r11
 112:	24 49       	sbci	r18, 0x94	; 148
 114:	12 3e       	cpi	r17, 0xE2	; 226
 116:	ab aa       	std	Y+51, r10	; 0x33
 118:	aa 2a       	or	r10, r26
 11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
 11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
 11e:	4c 3e       	cpi	r20, 0xEC	; 236
 120:	00 00       	nop
 122:	00 80       	ld	r0, Z
 124:	be ab       	std	Y+54, r27	; 0x36
 126:	aa aa       	std	Y+50, r10	; 0x32
 128:	aa 3e       	cpi	r26, 0xEA	; 234
 12a:	00 00       	nop
 12c:	00 00       	nop
 12e:	bf 00       	.word	0x00bf	; ????
 130:	00 00       	nop
 132:	80 3f       	cpi	r24, 0xF0	; 240
 134:	00 00       	nop
 136:	00 00       	nop
 138:	00 08       	sbc	r0, r0
 13a:	41 78       	andi	r20, 0x81	; 129
 13c:	d3 bb       	out	0x13, r29	; 19
 13e:	43 87       	std	Z+11, r20	; 0x0b
 140:	d1 13       	cpse	r29, r17
 142:	3d 19       	sub	r19, r13
 144:	0e 3c       	cpi	r16, 0xCE	; 206
 146:	c3 bd       	out	0x23, r28	; 35
 148:	42 82       	std	Z+2, r4	; 0x02
 14a:	ad 2b       	or	r26, r29
 14c:	3e 68       	ori	r19, 0x8E	; 142
 14e:	ec 82       	std	Y+4, r14	; 0x04
 150:	76 be       	out	0x36, r7	; 54
 152:	d9 8f       	std	Y+25, r29	; 0x19
 154:	e1 a9       	ldd	r30, Z+49	; 0x31
 156:	3e 4c       	sbci	r19, 0xCE	; 206
 158:	80 ef       	ldi	r24, 0xF0	; 240
 15a:	ff be       	out	0x3f, r15	; 63
 15c:	01 c4       	rjmp	.+2050   	; 0x960 <ldexp+0x34>
 15e:	ff 7f       	andi	r31, 0xFF	; 255
 160:	3f 00       	.word	0x003f	; ????
 162:	00 00       	nop
	...

00000166 <__ctors_end>:
 166:	11 24       	eor	r1, r1
 168:	1f be       	out	0x3f, r1	; 63
 16a:	cf ef       	ldi	r28, 0xFF	; 255
 16c:	d1 e2       	ldi	r29, 0x21	; 33
 16e:	de bf       	out	0x3e, r29	; 62
 170:	cd bf       	out	0x3d, r28	; 61
 172:	00 e0       	ldi	r16, 0x00	; 0
 174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
 176:	12 e0       	ldi	r17, 0x02	; 2
 178:	a0 e0       	ldi	r26, 0x00	; 0
 17a:	b2 e0       	ldi	r27, 0x02	; 2
 17c:	ec ea       	ldi	r30, 0xAC	; 172
 17e:	fc e0       	ldi	r31, 0x0C	; 12
 180:	00 e0       	ldi	r16, 0x00	; 0
 182:	0b bf       	out	0x3b, r16	; 59
 184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
 186:	07 90       	elpm	r0, Z+
 188:	0d 92       	st	X+, r0
 18a:	a8 35       	cpi	r26, 0x58	; 88
 18c:	b1 07       	cpc	r27, r17
 18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>
 190:	17 d0       	rcall	.+46     	; 0x1c0 <main>
 192:	8a c5       	rjmp	.+2836   	; 0xca8 <_exit>

00000194 <__bad_interrupt>:
 194:	35 cf       	rjmp	.-406    	; 0x0 <__vectors>

00000196 <Init_ADC>:
#include <stdio.h>

void Init_ADC()
{
	// PF pins are inputs (ADC7-ADC0 inputs)
	DDRF = 0;
 196:	10 ba       	out	0x10, r1	; 16
	// Internal 5 volt reference, ADLAR = 0, Input = ADC0 single ended (potentiometer)
	ADMUX = 0b01000000;
 198:	80 e4       	ldi	r24, 0x40	; 64
 19a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	// ADC enable
	// ADC interrupt disabled
	// ADC prescaler = 128 (=> ADC clock = 16 MHz / 128 = 125 kHZ)
	ADCSRA = 0b10000111;
 19e:	87 e8       	ldi	r24, 0x87	; 135
 1a0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
 1a4:	08 95       	ret

000001a6 <AnalogRead>:
}

int AnalogRead(){
	// Start new A/D conversion
	ADCSRA |= 0b01000000;
 1a6:	ea e7       	ldi	r30, 0x7A	; 122
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	80 64       	ori	r24, 0x40	; 64
 1ae:	80 83       	st	Z, r24
	// Wait for A/D conversion ended
	while (ADCSRA & 0b01000000)
 1b0:	80 81       	ld	r24, Z
 1b2:	86 fd       	sbrc	r24, 6
 1b4:	fd cf       	rjmp	.-6      	; 0x1b0 <AnalogRead+0xa>
	{}
	// Send ADC result to terminal
	float adcValue = ADCW;
 1b6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
 1ba:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	return adcValue;
}
 1be:	08 95       	ret

000001c0 <main>:
#include "UART/uart.h"
#include "MQDriver/MQ_135.h"

int main(void)
{
	Init_MQ();
 1c0:	67 d0       	rcall	.+206    	; 0x290 <Init_MQ>
	MqCalibrate(CO2);
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	6e d0       	rcall	.+220    	; 0x2a2 <MqCalibrate>
	
	while(1)
	{
		SendString("CO2 :");
 1c6:	8c e0       	ldi	r24, 0x0C	; 12
 1c8:	92 e0       	ldi	r25, 0x02	; 2
		float ppm = MQGetGasPercentage(CO2);
 1ca:	9c d1       	rcall	.+824    	; 0x504 <SendString>
 1cc:	80 e0       	ldi	r24, 0x00	; 0
		SendInteger(ppm);
 1ce:	04 d1       	rcall	.+520    	; 0x3d8 <MQGetGasPercentage>
 1d0:	c0 d2       	rcall	.+1408   	; 0x752 <__fixsfsi>
 1d2:	cb 01       	movw	r24, r22
 1d4:	a5 d1       	rcall	.+842    	; 0x520 <SendInteger>
		SendString("\r \n");
 1d6:	82 e1       	ldi	r24, 0x12	; 18
 1d8:	92 e0       	ldi	r25, 0x02	; 2
 1da:	94 d1       	rcall	.+808    	; 0x504 <SendString>
 1dc:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1de:	83 ed       	ldi	r24, 0xD3	; 211
 1e0:	90 e3       	ldi	r25, 0x30	; 48
 1e2:	21 50       	subi	r18, 0x01	; 1
 1e4:	80 40       	sbci	r24, 0x00	; 0
 1e6:	90 40       	sbci	r25, 0x00	; 0
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <main+0x22>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <main+0x2c>
 1ec:	00 00       	nop
 1ee:	eb cf       	rjmp	.-42     	; 0x1c6 <main+0x6>

000001f0 <MQResistanceCalculation>:
 1f0:	4f 92       	push	r4
}

//Input:   adc value
//Output:  Rs sensor resistance
//Calculate Sensor resistance from ADC
float MQResistanceCalculation(int adc_value){
 1f2:	5f 92       	push	r5
 1f4:	6f 92       	push	r6
 1f6:	7f 92       	push	r7
 1f8:	8f 92       	push	r8
 1fa:	9f 92       	push	r9
 1fc:	af 92       	push	r10
 1fe:	bf 92       	push	r11
 200:	cf 92       	push	r12
 202:	df 92       	push	r13
 204:	ef 92       	push	r14
 206:	ff 92       	push	r15
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	ec 01       	movw	r28, r24
	return ((5.0*(float)RL_VALUE)-((float)RL_VALUE*AdcToVoltage(adc_value)))/AdcToVoltage(adc_value);
 20e:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <RL_VALUE>
 212:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <RL_VALUE+0x1>
 216:	07 2e       	mov	r0, r23
 218:	00 0c       	add	r0, r0
 21a:	88 0b       	sbc	r24, r24
 21c:	99 0b       	sbc	r25, r25
 21e:	cc d2       	rcall	.+1432   	; 0x7b8 <__floatsisf>
 220:	4b 01       	movw	r8, r22
 222:	5c 01       	movw	r10, r24

//Input:   adc_value
//Output:  voltage
//Calculate Voltage from ADC
float AdcToVoltage(int adc_value){
	return (((float)adc_value)/1023.0)*5.0;
 224:	be 01       	movw	r22, r28
 226:	dd 0f       	add	r29, r29
 228:	88 0b       	sbc	r24, r24
 22a:	99 0b       	sbc	r25, r25
 22c:	c5 d2       	rcall	.+1418   	; 0x7b8 <__floatsisf>
 22e:	20 e0       	ldi	r18, 0x00	; 0
 230:	30 ec       	ldi	r19, 0xC0	; 192
 232:	4f e7       	ldi	r20, 0x7F	; 127
 234:	54 e4       	ldi	r21, 0x44	; 68
 236:	f4 d1       	rcall	.+1000   	; 0x620 <__divsf3>
 238:	20 e0       	ldi	r18, 0x00	; 0
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	40 ea       	ldi	r20, 0xA0	; 160
 23e:	50 e4       	ldi	r21, 0x40	; 64
 240:	21 d4       	rcall	.+2114   	; 0xa84 <__mulsf3>
 242:	6b 01       	movw	r12, r22
 244:	7c 01       	movw	r14, r24

//Input:   adc value
//Output:  Rs sensor resistance
//Calculate Sensor resistance from ADC
float MQResistanceCalculation(int adc_value){
	return ((5.0*(float)RL_VALUE)-((float)RL_VALUE*AdcToVoltage(adc_value)))/AdcToVoltage(adc_value);
 246:	20 e0       	ldi	r18, 0x00	; 0
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	40 ea       	ldi	r20, 0xA0	; 160
 24c:	50 e4       	ldi	r21, 0x40	; 64
 24e:	c5 01       	movw	r24, r10
 250:	b4 01       	movw	r22, r8
 252:	18 d4       	rcall	.+2096   	; 0xa84 <__mulsf3>
 254:	2b 01       	movw	r4, r22
 256:	3c 01       	movw	r6, r24
 258:	a7 01       	movw	r20, r14
 25a:	96 01       	movw	r18, r12
 25c:	c5 01       	movw	r24, r10
 25e:	b4 01       	movw	r22, r8
 260:	11 d4       	rcall	.+2082   	; 0xa84 <__mulsf3>
 262:	9b 01       	movw	r18, r22
 264:	ac 01       	movw	r20, r24
 266:	c3 01       	movw	r24, r6
 268:	b2 01       	movw	r22, r4
 26a:	75 d1       	rcall	.+746    	; 0x556 <__subsf3>
 26c:	a7 01       	movw	r20, r14
 26e:	96 01       	movw	r18, r12
 270:	d7 d1       	rcall	.+942    	; 0x620 <__divsf3>
}
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	ff 90       	pop	r15
 278:	ef 90       	pop	r14
 27a:	df 90       	pop	r13
 27c:	cf 90       	pop	r12
 27e:	bf 90       	pop	r11
 280:	af 90       	pop	r10
 282:	9f 90       	pop	r9
 284:	8f 90       	pop	r8
 286:	7f 90       	pop	r7
 288:	6f 90       	pop	r6
 28a:	5f 90       	pop	r5
 28c:	4f 90       	pop	r4
 28e:	08 95       	ret

00000290 <Init_MQ>:

//Initializes the sensor by initializing the dependencies
void Init_MQ(){
	InitUART(9600, 8, 'N');
 290:	2e e4       	ldi	r18, 0x4E	; 78
 292:	48 e0       	ldi	r20, 0x08	; 8
 294:	60 e8       	ldi	r22, 0x80	; 128
 296:	75 e2       	ldi	r23, 0x25	; 37
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	e0 d0       	rcall	.+448    	; 0x45e <InitUART>
	Init_ADC();
 29e:	7b cf       	rjmp	.-266    	; 0x196 <Init_ADC>
 2a0:	08 95       	ret

000002a2 <MqCalibrate>:
 2a2:	8f 92       	push	r8
}

//Input:   Gas type
//Sets Ro value for selected type
void MqCalibrate(enum Gas gas){
 2a4:	9f 92       	push	r9
 2a6:	af 92       	push	r10
 2a8:	bf 92       	push	r11
 2aa:	cf 92       	push	r12
 2ac:	df 92       	push	r13
 2ae:	ef 92       	push	r14
 2b0:	ff 92       	push	r15
 2b2:	1f 93       	push	r17
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	18 2f       	mov	r17, r24
	SendString("Calibrating MQ sensor \n \r");
 2ba:	86 e1       	ldi	r24, 0x16	; 22
 2bc:	92 e0       	ldi	r25, 0x02	; 2
 2be:	22 d1       	rcall	.+580    	; 0x504 <SendString>
 2c0:	c2 e3       	ldi	r28, 0x32	; 50
 2c2:	d0 e0       	ldi	r29, 0x00	; 0
	int i;
	float val = 0;
 2c4:	c1 2c       	mov	r12, r1
 2c6:	d1 2c       	mov	r13, r1
	for(i = 0; i < CALIBRATION_SAMPLES; i++){
		val+= MQResistanceCalculation(AnalogRead());
 2c8:	76 01       	movw	r14, r12
 2ca:	6d df       	rcall	.-294    	; 0x1a6 <AnalogRead>
 2cc:	91 df       	rcall	.-222    	; 0x1f0 <MQResistanceCalculation>
 2ce:	9b 01       	movw	r18, r22
 2d0:	ac 01       	movw	r20, r24
 2d2:	c7 01       	movw	r24, r14
 2d4:	b6 01       	movw	r22, r12
 2d6:	40 d1       	rcall	.+640    	; 0x558 <__addsf3>
 2d8:	6b 01       	movw	r12, r22
 2da:	7c 01       	movw	r14, r24
 2dc:	2f ef       	ldi	r18, 0xFF	; 255
 2de:	89 e6       	ldi	r24, 0x69	; 105
 2e0:	98 e1       	ldi	r25, 0x18	; 24
 2e2:	21 50       	subi	r18, 0x01	; 1
 2e4:	80 40       	sbci	r24, 0x00	; 0
 2e6:	90 40       	sbci	r25, 0x00	; 0
 2e8:	e1 f7       	brne	.-8      	; 0x2e2 <MqCalibrate+0x40>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <MqCalibrate+0x4a>
 2ec:	00 00       	nop
 2ee:	21 97       	sbiw	r28, 0x01	; 1
//Sets Ro value for selected type
void MqCalibrate(enum Gas gas){
	SendString("Calibrating MQ sensor \n \r");
	int i;
	float val = 0;
	for(i = 0; i < CALIBRATION_SAMPLES; i++){
 2f0:	61 f7       	brne	.-40     	; 0x2ca <MqCalibrate+0x28>
		val+= MQResistanceCalculation(AnalogRead());
		_delay_ms(CALIBRATION_INTERVAL);
	}
	val = val/CALIBRATION_SAMPLES;
	
	if(gas == CO2){
 2f2:	11 11       	cpse	r17, r1
 2f4:	32 c0       	rjmp	.+100    	; 0x35a <MqCalibrate+0xb8>
		Ro_CO2 = val * exp( log(CO2Curve[0]/CO2_BASE_PPM) / CO2Curve[1]);
 2f6:	c0 e0       	ldi	r28, 0x00	; 0
 2f8:	d2 e0       	ldi	r29, 0x02	; 2
 2fa:	20 e0       	ldi	r18, 0x00	; 0
 2fc:	30 e8       	ldi	r19, 0x80	; 128
 2fe:	4f ec       	ldi	r20, 0xCF	; 207
 300:	53 e4       	ldi	r21, 0x43	; 67
 302:	68 81       	ld	r22, Y
 304:	79 81       	ldd	r23, Y+1	; 0x01
 306:	8a 81       	ldd	r24, Y+2	; 0x02
 308:	9b 81       	ldd	r25, Y+3	; 0x03
 30a:	8a d1       	rcall	.+788    	; 0x620 <__divsf3>
 30c:	48 d3       	rcall	.+1680   	; 0x99e <log>
 30e:	2c 81       	ldd	r18, Y+4	; 0x04
 310:	3d 81       	ldd	r19, Y+5	; 0x05
 312:	4e 81       	ldd	r20, Y+6	; 0x06
 314:	5f 81       	ldd	r21, Y+7	; 0x07
 316:	84 d1       	rcall	.+776    	; 0x620 <__divsf3>
 318:	f0 d1       	rcall	.+992    	; 0x6fa <exp>
 31a:	4b 01       	movw	r8, r22
 31c:	5c 01       	movw	r10, r24
 31e:	20 e0       	ldi	r18, 0x00	; 0
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	48 e4       	ldi	r20, 0x48	; 72
 324:	52 e4       	ldi	r21, 0x42	; 66
 326:	c7 01       	movw	r24, r14
 328:	b6 01       	movw	r22, r12
 32a:	7a d1       	rcall	.+756    	; 0x620 <__divsf3>
 32c:	a5 01       	movw	r20, r10
 32e:	94 01       	movw	r18, r8
 330:	a9 d3       	rcall	.+1874   	; 0xa84 <__mulsf3>
 332:	0f d2       	rcall	.+1054   	; 0x752 <__fixsfsi>
 334:	70 93 0b 02 	sts	0x020B, r23	; 0x80020b <Ro_CO2+0x1>
 338:	60 93 0a 02 	sts	0x020A, r22	; 0x80020a <Ro_CO2>
		SendString("Calibration done for CO2 \n \r");
 33c:	80 e3       	ldi	r24, 0x30	; 48
 33e:	92 e0       	ldi	r25, 0x02	; 2
		SendString("Ro value: ");
 340:	e1 d0       	rcall	.+450    	; 0x504 <SendString>
 342:	8d e4       	ldi	r24, 0x4D	; 77
 344:	92 e0       	ldi	r25, 0x02	; 2
 346:	de d0       	rcall	.+444    	; 0x504 <SendString>
		SendInteger(Ro_CO2);
 348:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <Ro_CO2>
 34c:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <Ro_CO2+0x1>
 350:	e7 d0       	rcall	.+462    	; 0x520 <SendInteger>
 352:	82 e1       	ldi	r24, 0x12	; 18
		SendString("\r \n");
 354:	92 e0       	ldi	r25, 0x02	; 2
 356:	d6 d0       	rcall	.+428    	; 0x504 <SendString>
 358:	06 c0       	rjmp	.+12     	; 0x366 <MqCalibrate+0xc4>
 35a:	8f ef       	ldi	r24, 0xFF	; 255
 35c:	9f ef       	ldi	r25, 0xFF	; 255
	}else{
		Ro_CO2 = -1;
 35e:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <Ro_CO2+0x1>
 362:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <Ro_CO2>
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
	}
		
}
 36a:	1f 91       	pop	r17
 36c:	ff 90       	pop	r15
 36e:	ef 90       	pop	r14
 370:	df 90       	pop	r13
 372:	cf 90       	pop	r12
 374:	bf 90       	pop	r11
 376:	af 90       	pop	r10
 378:	9f 90       	pop	r9
 37a:	8f 90       	pop	r8
 37c:	08 95       	ret

0000037e <MQRead>:
 37e:	cf 92       	push	r12
 380:	df 92       	push	r13

//Output:  Rs value
float MQRead(){
 382:	ef 92       	push	r14
 384:	ff 92       	push	r15
 386:	cf 93       	push	r28
 388:	df 93       	push	r29
 38a:	c5 e0       	ldi	r28, 0x05	; 5
 38c:	d0 e0       	ldi	r29, 0x00	; 0
	int i;
	float rs=0;
 38e:	c1 2c       	mov	r12, r1
 390:	d1 2c       	mov	r13, r1
 392:	76 01       	movw	r14, r12
	
	for (i=0;i<READ_SAMPLES;i++) {
		rs += MQResistanceCalculation(AnalogRead());
 394:	08 df       	rcall	.-496    	; 0x1a6 <AnalogRead>
 396:	2c df       	rcall	.-424    	; 0x1f0 <MQResistanceCalculation>
 398:	9b 01       	movw	r18, r22
 39a:	ac 01       	movw	r20, r24
 39c:	c7 01       	movw	r24, r14
 39e:	b6 01       	movw	r22, r12
 3a0:	db d0       	rcall	.+438    	; 0x558 <__addsf3>
 3a2:	6b 01       	movw	r12, r22
 3a4:	7c 01       	movw	r14, r24
 3a6:	2f ef       	ldi	r18, 0xFF	; 255
 3a8:	80 e7       	ldi	r24, 0x70	; 112
 3aa:	92 e0       	ldi	r25, 0x02	; 2
 3ac:	21 50       	subi	r18, 0x01	; 1
 3ae:	80 40       	sbci	r24, 0x00	; 0
 3b0:	90 40       	sbci	r25, 0x00	; 0
 3b2:	e1 f7       	brne	.-8      	; 0x3ac <MQRead+0x2e>
 3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <MQRead+0x38>
 3b6:	00 00       	nop
 3b8:	21 97       	sbiw	r28, 0x01	; 1
//Output:  Rs value
float MQRead(){
	int i;
	float rs=0;
	
	for (i=0;i<READ_SAMPLES;i++) {
 3ba:	61 f7       	brne	.-40     	; 0x394 <MQRead+0x16>
		rs += MQResistanceCalculation(AnalogRead());
		_delay_ms(READ_INTERVAL);
	}
	rs = rs/READ_SAMPLES;
	return rs;
 3bc:	20 e0       	ldi	r18, 0x00	; 0
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	40 ea       	ldi	r20, 0xA0	; 160
 3c2:	50 e4       	ldi	r21, 0x40	; 64
 3c4:	c7 01       	movw	r24, r14
 3c6:	b6 01       	movw	r22, r12
 3c8:	2b d1       	rcall	.+598    	; 0x620 <__divsf3>
}
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	ff 90       	pop	r15
 3d0:	ef 90       	pop	r14
 3d2:	df 90       	pop	r13
 3d4:	cf 90       	pop	r12
 3d6:	08 95       	ret

000003d8 <MQGetGasPercentage>:

//Input:   Gas type
//Output:  ppm for selected gas type
float MQGetGasPercentage(enum Gas gas){
 3d8:	4f 92       	push	r4
 3da:	5f 92       	push	r5
 3dc:	6f 92       	push	r6
 3de:	7f 92       	push	r7
 3e0:	8f 92       	push	r8
 3e2:	9f 92       	push	r9
 3e4:	af 92       	push	r10
 3e6:	bf 92       	push	r11
 3e8:	cf 92       	push	r12
 3ea:	df 92       	push	r13
 3ec:	ef 92       	push	r14
 3ee:	ff 92       	push	r15
	if(gas == CO2){
 3f0:	81 11       	cpse	r24, r1
 3f2:	24 c0       	rjmp	.+72     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
		return CO2Curve[0] * pow(MQRead()/Ro_CO2, CO2Curve[1]);
 3f4:	e0 e0       	ldi	r30, 0x00	; 0
 3f6:	f2 e0       	ldi	r31, 0x02	; 2
 3f8:	c0 80       	ld	r12, Z
 3fa:	d1 80       	ldd	r13, Z+1	; 0x01
 3fc:	e2 80       	ldd	r14, Z+2	; 0x02
 3fe:	f3 80       	ldd	r15, Z+3	; 0x03
 400:	84 80       	ldd	r8, Z+4	; 0x04
 402:	95 80       	ldd	r9, Z+5	; 0x05
 404:	a6 80       	ldd	r10, Z+6	; 0x06
 406:	b7 80       	ldd	r11, Z+7	; 0x07
 408:	ba df       	rcall	.-140    	; 0x37e <MQRead>
 40a:	2b 01       	movw	r4, r22
 40c:	3c 01       	movw	r6, r24
 40e:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <Ro_CO2>
 412:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <Ro_CO2+0x1>
 416:	07 2e       	mov	r0, r23
 418:	00 0c       	add	r0, r0
 41a:	88 0b       	sbc	r24, r24
 41c:	99 0b       	sbc	r25, r25
 41e:	cc d1       	rcall	.+920    	; 0x7b8 <__floatsisf>
 420:	9b 01       	movw	r18, r22
 422:	ac 01       	movw	r20, r24
 424:	c3 01       	movw	r24, r6
 426:	b2 01       	movw	r22, r4
 428:	fb d0       	rcall	.+502    	; 0x620 <__divsf3>
 42a:	a5 01       	movw	r20, r10
 42c:	94 01       	movw	r18, r8
 42e:	8d d3       	rcall	.+1818   	; 0xb4a <pow>
 430:	9b 01       	movw	r18, r22
 432:	ac 01       	movw	r20, r24
 434:	c7 01       	movw	r24, r14
 436:	b6 01       	movw	r22, r12
 438:	25 d3       	rcall	.+1610   	; 0xa84 <__mulsf3>
 43a:	04 c0       	rjmp	.+8      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
	}
	
	return -1;
 43c:	60 e0       	ldi	r22, 0x00	; 0
 43e:	70 e0       	ldi	r23, 0x00	; 0
 440:	80 e8       	ldi	r24, 0x80	; 128
 442:	9f eb       	ldi	r25, 0xBF	; 191
 444:	ff 90       	pop	r15
 446:	ef 90       	pop	r14
 448:	df 90       	pop	r13
 44a:	cf 90       	pop	r12
 44c:	bf 90       	pop	r11
 44e:	af 90       	pop	r10
 450:	9f 90       	pop	r9
 452:	8f 90       	pop	r8
 454:	7f 90       	pop	r7
 456:	6f 90       	pop	r6
 458:	5f 90       	pop	r5
 45a:	4f 90       	pop	r4
 45c:	08 95       	ret

0000045e <InitUART>:
  // Wait for new character received
  while ( (UCSR0A & (1<<7)) == 0 )
  {}                        
  // Then return it
  return UDR0;
}
 45e:	0f 93       	push	r16
 460:	1f 93       	push	r17
 462:	52 2f       	mov	r21, r18
 464:	8b 01       	movw	r16, r22
 466:	9c 01       	movw	r18, r24
 468:	0c 52       	subi	r16, 0x2C	; 44
 46a:	11 40       	sbci	r17, 0x01	; 1
 46c:	21 09       	sbc	r18, r1
 46e:	31 09       	sbc	r19, r1
 470:	05 3d       	cpi	r16, 0xD5	; 213
 472:	10 4c       	sbci	r17, 0xC0	; 192
 474:	21 40       	sbci	r18, 0x01	; 1
 476:	31 05       	cpc	r19, r1
 478:	d0 f5       	brcc	.+116    	; 0x4ee <InitUART+0x90>
 47a:	45 50       	subi	r20, 0x05	; 5
 47c:	44 30       	cpi	r20, 0x04	; 4
 47e:	b8 f5       	brcc	.+110    	; 0x4ee <InitUART+0x90>
 480:	20 e2       	ldi	r18, 0x20	; 32
 482:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 486:	28 e1       	ldi	r18, 0x18	; 24
 488:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 48c:	44 0f       	add	r20, r20
 48e:	40 93 c2 00 	sts	0x00C2, r20	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 492:	55 34       	cpi	r21, 0x45	; 69
 494:	31 f4       	brne	.+12     	; 0x4a2 <InitUART+0x44>
 496:	e2 ec       	ldi	r30, 0xC2	; 194
 498:	f0 e0       	ldi	r31, 0x00	; 0
 49a:	20 81       	ld	r18, Z
 49c:	20 62       	ori	r18, 0x20	; 32
 49e:	20 83       	st	Z, r18
 4a0:	07 c0       	rjmp	.+14     	; 0x4b0 <InitUART+0x52>
 4a2:	5f 34       	cpi	r21, 0x4F	; 79
 4a4:	29 f4       	brne	.+10     	; 0x4b0 <InitUART+0x52>
 4a6:	e2 ec       	ldi	r30, 0xC2	; 194
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	20 81       	ld	r18, Z
 4ac:	20 63       	ori	r18, 0x30	; 48
 4ae:	20 83       	st	Z, r18
 4b0:	dc 01       	movw	r26, r24
 4b2:	cb 01       	movw	r24, r22
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	aa 1f       	adc	r26, r26
 4ba:	bb 1f       	adc	r27, r27
 4bc:	88 0f       	add	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	aa 1f       	adc	r26, r26
 4c2:	bb 1f       	adc	r27, r27
 4c4:	9c 01       	movw	r18, r24
 4c6:	ad 01       	movw	r20, r26
 4c8:	22 0f       	add	r18, r18
 4ca:	33 1f       	adc	r19, r19
 4cc:	44 1f       	adc	r20, r20
 4ce:	55 1f       	adc	r21, r21
 4d0:	22 0f       	add	r18, r18
 4d2:	33 1f       	adc	r19, r19
 4d4:	44 1f       	adc	r20, r20
 4d6:	55 1f       	adc	r21, r21
 4d8:	60 e0       	ldi	r22, 0x00	; 0
 4da:	74 e2       	ldi	r23, 0x24	; 36
 4dc:	84 ef       	ldi	r24, 0xF4	; 244
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	8e d3       	rcall	.+1820   	; 0xbfe <__udivmodsi4>
 4e2:	21 50       	subi	r18, 0x01	; 1
 4e4:	31 09       	sbc	r19, r1
 4e6:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 4ea:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 4ee:	1f 91       	pop	r17
 4f0:	0f 91       	pop	r16
 4f2:	08 95       	ret

000004f4 <SendChar>:
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(char Tegn)
{
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSR0A & (1<<5)) == 0 )
 4f4:	e0 ec       	ldi	r30, 0xC0	; 192
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	90 81       	ld	r25, Z
 4fa:	95 ff       	sbrs	r25, 5
 4fc:	fd cf       	rjmp	.-6      	; 0x4f8 <SendChar+0x4>
  {}
  // Then send the character
  UDR0 = Tegn;
 4fe:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 502:	08 95       	ret

00000504 <SendString>:
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(char* Streng)
{
 504:	cf 93       	push	r28
 506:	df 93       	push	r29
 508:	ec 01       	movw	r28, r24
  // Repeat until zero-termination
  while (*Streng != 0)
 50a:	88 81       	ld	r24, Y
 50c:	88 23       	and	r24, r24
 50e:	29 f0       	breq	.+10     	; 0x51a <SendString+0x16>
 510:	21 96       	adiw	r28, 0x01	; 1
  {
    // Send the character pointed to by "Streng"
    SendChar(*Streng);
 512:	f0 df       	rcall	.-32     	; 0x4f4 <SendChar>
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(char* Streng)
{
  // Repeat until zero-termination
  while (*Streng != 0)
 514:	89 91       	ld	r24, Y+
 516:	81 11       	cpse	r24, r1
 518:	fc cf       	rjmp	.-8      	; 0x512 <SendString+0xe>
    // Send the character pointed to by "Streng"
    SendChar(*Streng);
    // Advance the pointer one step
    Streng++;
  }
}
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28
 51e:	08 95       	ret

00000520 <SendInteger>:
Makes use of the C standard library <stdlib.h>.
Parameter:
    Tal: The integer to be converted and sent. 
*************************************************************************/
void SendInteger(int Tal)
{
 520:	cf 93       	push	r28
 522:	df 93       	push	r29
 524:	cd b7       	in	r28, 0x3d	; 61
 526:	de b7       	in	r29, 0x3e	; 62
 528:	27 97       	sbiw	r28, 0x07	; 7
 52a:	0f b6       	in	r0, 0x3f	; 63
 52c:	f8 94       	cli
 52e:	de bf       	out	0x3e, r29	; 62
 530:	0f be       	out	0x3f, r0	; 63
 532:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 534:	4a e0       	ldi	r20, 0x0A	; 10
 536:	be 01       	movw	r22, r28
 538:	6f 5f       	subi	r22, 0xFF	; 255
 53a:	7f 4f       	sbci	r23, 0xFF	; 255
 53c:	82 d3       	rcall	.+1796   	; 0xc42 <__itoa_ncheck>
char array[7];
  // Convert the integer to an ASCII string (array), radix = 10 
  itoa(Tal, array, 10);
  // - then send the string
  SendString(array);
 53e:	ce 01       	movw	r24, r28
 540:	01 96       	adiw	r24, 0x01	; 1
 542:	e0 df       	rcall	.-64     	; 0x504 <SendString>
}
 544:	27 96       	adiw	r28, 0x07	; 7
 546:	0f b6       	in	r0, 0x3f	; 63
 548:	f8 94       	cli
 54a:	de bf       	out	0x3e, r29	; 62
 54c:	0f be       	out	0x3f, r0	; 63
 54e:	cd bf       	out	0x3d, r28	; 61
 550:	df 91       	pop	r29
 552:	cf 91       	pop	r28
 554:	08 95       	ret

00000556 <__subsf3>:
 556:	50 58       	subi	r21, 0x80	; 128

00000558 <__addsf3>:
 558:	bb 27       	eor	r27, r27
 55a:	aa 27       	eor	r26, r26
 55c:	0e d0       	rcall	.+28     	; 0x57a <__addsf3x>
 55e:	a3 c1       	rjmp	.+838    	; 0x8a6 <__fp_round>
 560:	94 d1       	rcall	.+808    	; 0x88a <__fp_pscA>
 562:	30 f0       	brcs	.+12     	; 0x570 <__addsf3+0x18>
 564:	99 d1       	rcall	.+818    	; 0x898 <__fp_pscB>
 566:	20 f0       	brcs	.+8      	; 0x570 <__addsf3+0x18>
 568:	31 f4       	brne	.+12     	; 0x576 <__addsf3+0x1e>
 56a:	9f 3f       	cpi	r25, 0xFF	; 255
 56c:	11 f4       	brne	.+4      	; 0x572 <__addsf3+0x1a>
 56e:	1e f4       	brtc	.+6      	; 0x576 <__addsf3+0x1e>
 570:	64 c1       	rjmp	.+712    	; 0x83a <__fp_nan>
 572:	0e f4       	brtc	.+2      	; 0x576 <__addsf3+0x1e>
 574:	e0 95       	com	r30
 576:	e7 fb       	bst	r30, 7
 578:	5a c1       	rjmp	.+692    	; 0x82e <__fp_inf>

0000057a <__addsf3x>:
 57a:	e9 2f       	mov	r30, r25
 57c:	a5 d1       	rcall	.+842    	; 0x8c8 <__fp_split3>
 57e:	80 f3       	brcs	.-32     	; 0x560 <__addsf3+0x8>
 580:	ba 17       	cp	r27, r26
 582:	62 07       	cpc	r22, r18
 584:	73 07       	cpc	r23, r19
 586:	84 07       	cpc	r24, r20
 588:	95 07       	cpc	r25, r21
 58a:	18 f0       	brcs	.+6      	; 0x592 <__addsf3x+0x18>
 58c:	71 f4       	brne	.+28     	; 0x5aa <__addsf3x+0x30>
 58e:	9e f5       	brtc	.+102    	; 0x5f6 <__addsf3x+0x7c>
 590:	bd c1       	rjmp	.+890    	; 0x90c <__fp_zero>
 592:	0e f4       	brtc	.+2      	; 0x596 <__addsf3x+0x1c>
 594:	e0 95       	com	r30
 596:	0b 2e       	mov	r0, r27
 598:	ba 2f       	mov	r27, r26
 59a:	a0 2d       	mov	r26, r0
 59c:	0b 01       	movw	r0, r22
 59e:	b9 01       	movw	r22, r18
 5a0:	90 01       	movw	r18, r0
 5a2:	0c 01       	movw	r0, r24
 5a4:	ca 01       	movw	r24, r20
 5a6:	a0 01       	movw	r20, r0
 5a8:	11 24       	eor	r1, r1
 5aa:	ff 27       	eor	r31, r31
 5ac:	59 1b       	sub	r21, r25
 5ae:	99 f0       	breq	.+38     	; 0x5d6 <__addsf3x+0x5c>
 5b0:	59 3f       	cpi	r21, 0xF9	; 249
 5b2:	50 f4       	brcc	.+20     	; 0x5c8 <__addsf3x+0x4e>
 5b4:	50 3e       	cpi	r21, 0xE0	; 224
 5b6:	68 f1       	brcs	.+90     	; 0x612 <__addsf3x+0x98>
 5b8:	1a 16       	cp	r1, r26
 5ba:	f0 40       	sbci	r31, 0x00	; 0
 5bc:	a2 2f       	mov	r26, r18
 5be:	23 2f       	mov	r18, r19
 5c0:	34 2f       	mov	r19, r20
 5c2:	44 27       	eor	r20, r20
 5c4:	58 5f       	subi	r21, 0xF8	; 248
 5c6:	f3 cf       	rjmp	.-26     	; 0x5ae <__addsf3x+0x34>
 5c8:	46 95       	lsr	r20
 5ca:	37 95       	ror	r19
 5cc:	27 95       	ror	r18
 5ce:	a7 95       	ror	r26
 5d0:	f0 40       	sbci	r31, 0x00	; 0
 5d2:	53 95       	inc	r21
 5d4:	c9 f7       	brne	.-14     	; 0x5c8 <__addsf3x+0x4e>
 5d6:	7e f4       	brtc	.+30     	; 0x5f6 <__addsf3x+0x7c>
 5d8:	1f 16       	cp	r1, r31
 5da:	ba 0b       	sbc	r27, r26
 5dc:	62 0b       	sbc	r22, r18
 5de:	73 0b       	sbc	r23, r19
 5e0:	84 0b       	sbc	r24, r20
 5e2:	ba f0       	brmi	.+46     	; 0x612 <__addsf3x+0x98>
 5e4:	91 50       	subi	r25, 0x01	; 1
 5e6:	a1 f0       	breq	.+40     	; 0x610 <__addsf3x+0x96>
 5e8:	ff 0f       	add	r31, r31
 5ea:	bb 1f       	adc	r27, r27
 5ec:	66 1f       	adc	r22, r22
 5ee:	77 1f       	adc	r23, r23
 5f0:	88 1f       	adc	r24, r24
 5f2:	c2 f7       	brpl	.-16     	; 0x5e4 <__addsf3x+0x6a>
 5f4:	0e c0       	rjmp	.+28     	; 0x612 <__addsf3x+0x98>
 5f6:	ba 0f       	add	r27, r26
 5f8:	62 1f       	adc	r22, r18
 5fa:	73 1f       	adc	r23, r19
 5fc:	84 1f       	adc	r24, r20
 5fe:	48 f4       	brcc	.+18     	; 0x612 <__addsf3x+0x98>
 600:	87 95       	ror	r24
 602:	77 95       	ror	r23
 604:	67 95       	ror	r22
 606:	b7 95       	ror	r27
 608:	f7 95       	ror	r31
 60a:	9e 3f       	cpi	r25, 0xFE	; 254
 60c:	08 f0       	brcs	.+2      	; 0x610 <__addsf3x+0x96>
 60e:	b3 cf       	rjmp	.-154    	; 0x576 <__addsf3+0x1e>
 610:	93 95       	inc	r25
 612:	88 0f       	add	r24, r24
 614:	08 f0       	brcs	.+2      	; 0x618 <__addsf3x+0x9e>
 616:	99 27       	eor	r25, r25
 618:	ee 0f       	add	r30, r30
 61a:	97 95       	ror	r25
 61c:	87 95       	ror	r24
 61e:	08 95       	ret

00000620 <__divsf3>:
 620:	0c d0       	rcall	.+24     	; 0x63a <__divsf3x>
 622:	41 c1       	rjmp	.+642    	; 0x8a6 <__fp_round>
 624:	39 d1       	rcall	.+626    	; 0x898 <__fp_pscB>
 626:	40 f0       	brcs	.+16     	; 0x638 <__divsf3+0x18>
 628:	30 d1       	rcall	.+608    	; 0x88a <__fp_pscA>
 62a:	30 f0       	brcs	.+12     	; 0x638 <__divsf3+0x18>
 62c:	21 f4       	brne	.+8      	; 0x636 <__divsf3+0x16>
 62e:	5f 3f       	cpi	r21, 0xFF	; 255
 630:	19 f0       	breq	.+6      	; 0x638 <__divsf3+0x18>
 632:	fd c0       	rjmp	.+506    	; 0x82e <__fp_inf>
 634:	51 11       	cpse	r21, r1
 636:	6b c1       	rjmp	.+726    	; 0x90e <__fp_szero>
 638:	00 c1       	rjmp	.+512    	; 0x83a <__fp_nan>

0000063a <__divsf3x>:
 63a:	46 d1       	rcall	.+652    	; 0x8c8 <__fp_split3>
 63c:	98 f3       	brcs	.-26     	; 0x624 <__divsf3+0x4>

0000063e <__divsf3_pse>:
 63e:	99 23       	and	r25, r25
 640:	c9 f3       	breq	.-14     	; 0x634 <__divsf3+0x14>
 642:	55 23       	and	r21, r21
 644:	b1 f3       	breq	.-20     	; 0x632 <__divsf3+0x12>
 646:	95 1b       	sub	r25, r21
 648:	55 0b       	sbc	r21, r21
 64a:	bb 27       	eor	r27, r27
 64c:	aa 27       	eor	r26, r26
 64e:	62 17       	cp	r22, r18
 650:	73 07       	cpc	r23, r19
 652:	84 07       	cpc	r24, r20
 654:	38 f0       	brcs	.+14     	; 0x664 <__divsf3_pse+0x26>
 656:	9f 5f       	subi	r25, 0xFF	; 255
 658:	5f 4f       	sbci	r21, 0xFF	; 255
 65a:	22 0f       	add	r18, r18
 65c:	33 1f       	adc	r19, r19
 65e:	44 1f       	adc	r20, r20
 660:	aa 1f       	adc	r26, r26
 662:	a9 f3       	breq	.-22     	; 0x64e <__divsf3_pse+0x10>
 664:	33 d0       	rcall	.+102    	; 0x6cc <__divsf3_pse+0x8e>
 666:	0e 2e       	mov	r0, r30
 668:	3a f0       	brmi	.+14     	; 0x678 <__divsf3_pse+0x3a>
 66a:	e0 e8       	ldi	r30, 0x80	; 128
 66c:	30 d0       	rcall	.+96     	; 0x6ce <__divsf3_pse+0x90>
 66e:	91 50       	subi	r25, 0x01	; 1
 670:	50 40       	sbci	r21, 0x00	; 0
 672:	e6 95       	lsr	r30
 674:	00 1c       	adc	r0, r0
 676:	ca f7       	brpl	.-14     	; 0x66a <__divsf3_pse+0x2c>
 678:	29 d0       	rcall	.+82     	; 0x6cc <__divsf3_pse+0x8e>
 67a:	fe 2f       	mov	r31, r30
 67c:	27 d0       	rcall	.+78     	; 0x6cc <__divsf3_pse+0x8e>
 67e:	66 0f       	add	r22, r22
 680:	77 1f       	adc	r23, r23
 682:	88 1f       	adc	r24, r24
 684:	bb 1f       	adc	r27, r27
 686:	26 17       	cp	r18, r22
 688:	37 07       	cpc	r19, r23
 68a:	48 07       	cpc	r20, r24
 68c:	ab 07       	cpc	r26, r27
 68e:	b0 e8       	ldi	r27, 0x80	; 128
 690:	09 f0       	breq	.+2      	; 0x694 <__divsf3_pse+0x56>
 692:	bb 0b       	sbc	r27, r27
 694:	80 2d       	mov	r24, r0
 696:	bf 01       	movw	r22, r30
 698:	ff 27       	eor	r31, r31
 69a:	93 58       	subi	r25, 0x83	; 131
 69c:	5f 4f       	sbci	r21, 0xFF	; 255
 69e:	2a f0       	brmi	.+10     	; 0x6aa <__divsf3_pse+0x6c>
 6a0:	9e 3f       	cpi	r25, 0xFE	; 254
 6a2:	51 05       	cpc	r21, r1
 6a4:	68 f0       	brcs	.+26     	; 0x6c0 <__divsf3_pse+0x82>
 6a6:	c3 c0       	rjmp	.+390    	; 0x82e <__fp_inf>
 6a8:	32 c1       	rjmp	.+612    	; 0x90e <__fp_szero>
 6aa:	5f 3f       	cpi	r21, 0xFF	; 255
 6ac:	ec f3       	brlt	.-6      	; 0x6a8 <__divsf3_pse+0x6a>
 6ae:	98 3e       	cpi	r25, 0xE8	; 232
 6b0:	dc f3       	brlt	.-10     	; 0x6a8 <__divsf3_pse+0x6a>
 6b2:	86 95       	lsr	r24
 6b4:	77 95       	ror	r23
 6b6:	67 95       	ror	r22
 6b8:	b7 95       	ror	r27
 6ba:	f7 95       	ror	r31
 6bc:	9f 5f       	subi	r25, 0xFF	; 255
 6be:	c9 f7       	brne	.-14     	; 0x6b2 <__divsf3_pse+0x74>
 6c0:	88 0f       	add	r24, r24
 6c2:	91 1d       	adc	r25, r1
 6c4:	96 95       	lsr	r25
 6c6:	87 95       	ror	r24
 6c8:	97 f9       	bld	r25, 7
 6ca:	08 95       	ret
 6cc:	e1 e0       	ldi	r30, 0x01	; 1
 6ce:	66 0f       	add	r22, r22
 6d0:	77 1f       	adc	r23, r23
 6d2:	88 1f       	adc	r24, r24
 6d4:	bb 1f       	adc	r27, r27
 6d6:	62 17       	cp	r22, r18
 6d8:	73 07       	cpc	r23, r19
 6da:	84 07       	cpc	r24, r20
 6dc:	ba 07       	cpc	r27, r26
 6de:	20 f0       	brcs	.+8      	; 0x6e8 <__divsf3_pse+0xaa>
 6e0:	62 1b       	sub	r22, r18
 6e2:	73 0b       	sbc	r23, r19
 6e4:	84 0b       	sbc	r24, r20
 6e6:	ba 0b       	sbc	r27, r26
 6e8:	ee 1f       	adc	r30, r30
 6ea:	88 f7       	brcc	.-30     	; 0x6ce <__divsf3_pse+0x90>
 6ec:	e0 95       	com	r30
 6ee:	08 95       	ret
 6f0:	19 f4       	brne	.+6      	; 0x6f8 <__divsf3_pse+0xba>
 6f2:	0e f0       	brts	.+2      	; 0x6f6 <__divsf3_pse+0xb8>
 6f4:	9c c0       	rjmp	.+312    	; 0x82e <__fp_inf>
 6f6:	0a c1       	rjmp	.+532    	; 0x90c <__fp_zero>
 6f8:	a0 c0       	rjmp	.+320    	; 0x83a <__fp_nan>

000006fa <exp>:
 6fa:	ee d0       	rcall	.+476    	; 0x8d8 <__fp_splitA>
 6fc:	c8 f3       	brcs	.-14     	; 0x6f0 <__divsf3_pse+0xb2>
 6fe:	96 38       	cpi	r25, 0x86	; 134
 700:	c0 f7       	brcc	.-16     	; 0x6f2 <__divsf3_pse+0xb4>
 702:	07 f8       	bld	r0, 7
 704:	0f 92       	push	r0
 706:	e8 94       	clt
 708:	2b e3       	ldi	r18, 0x3B	; 59
 70a:	3a ea       	ldi	r19, 0xAA	; 170
 70c:	48 eb       	ldi	r20, 0xB8	; 184
 70e:	5f e7       	ldi	r21, 0x7F	; 127
 710:	c7 d1       	rcall	.+910    	; 0xaa0 <__mulsf3_pse>
 712:	0f 92       	push	r0
 714:	0f 92       	push	r0
 716:	0f 92       	push	r0
 718:	4d b7       	in	r20, 0x3d	; 61
 71a:	5e b7       	in	r21, 0x3e	; 62
 71c:	0f 92       	push	r0
 71e:	7f d1       	rcall	.+766    	; 0xa1e <modf>
 720:	e4 ee       	ldi	r30, 0xE4	; 228
 722:	f0 e0       	ldi	r31, 0x00	; 0
 724:	8d d0       	rcall	.+282    	; 0x840 <__fp_powser>
 726:	4f 91       	pop	r20
 728:	5f 91       	pop	r21
 72a:	ef 91       	pop	r30
 72c:	ff 91       	pop	r31
 72e:	e5 95       	asr	r30
 730:	ee 1f       	adc	r30, r30
 732:	ff 1f       	adc	r31, r31
 734:	49 f0       	breq	.+18     	; 0x748 <exp+0x4e>
 736:	fe 57       	subi	r31, 0x7E	; 126
 738:	e0 68       	ori	r30, 0x80	; 128
 73a:	44 27       	eor	r20, r20
 73c:	ee 0f       	add	r30, r30
 73e:	44 1f       	adc	r20, r20
 740:	fa 95       	dec	r31
 742:	e1 f7       	brne	.-8      	; 0x73c <exp+0x42>
 744:	41 95       	neg	r20
 746:	55 0b       	sbc	r21, r21
 748:	f1 d0       	rcall	.+482    	; 0x92c <ldexp>
 74a:	0f 90       	pop	r0
 74c:	07 fe       	sbrs	r0, 7
 74e:	e5 c0       	rjmp	.+458    	; 0x91a <inverse>
 750:	08 95       	ret

00000752 <__fixsfsi>:
 752:	04 d0       	rcall	.+8      	; 0x75c <__fixunssfsi>
 754:	68 94       	set
 756:	b1 11       	cpse	r27, r1
 758:	da c0       	rjmp	.+436    	; 0x90e <__fp_szero>
 75a:	08 95       	ret

0000075c <__fixunssfsi>:
 75c:	bd d0       	rcall	.+378    	; 0x8d8 <__fp_splitA>
 75e:	88 f0       	brcs	.+34     	; 0x782 <__fixunssfsi+0x26>
 760:	9f 57       	subi	r25, 0x7F	; 127
 762:	90 f0       	brcs	.+36     	; 0x788 <__fixunssfsi+0x2c>
 764:	b9 2f       	mov	r27, r25
 766:	99 27       	eor	r25, r25
 768:	b7 51       	subi	r27, 0x17	; 23
 76a:	a0 f0       	brcs	.+40     	; 0x794 <__fixunssfsi+0x38>
 76c:	d1 f0       	breq	.+52     	; 0x7a2 <__fixunssfsi+0x46>
 76e:	66 0f       	add	r22, r22
 770:	77 1f       	adc	r23, r23
 772:	88 1f       	adc	r24, r24
 774:	99 1f       	adc	r25, r25
 776:	1a f0       	brmi	.+6      	; 0x77e <__fixunssfsi+0x22>
 778:	ba 95       	dec	r27
 77a:	c9 f7       	brne	.-14     	; 0x76e <__fixunssfsi+0x12>
 77c:	12 c0       	rjmp	.+36     	; 0x7a2 <__fixunssfsi+0x46>
 77e:	b1 30       	cpi	r27, 0x01	; 1
 780:	81 f0       	breq	.+32     	; 0x7a2 <__fixunssfsi+0x46>
 782:	c4 d0       	rcall	.+392    	; 0x90c <__fp_zero>
 784:	b1 e0       	ldi	r27, 0x01	; 1
 786:	08 95       	ret
 788:	c1 c0       	rjmp	.+386    	; 0x90c <__fp_zero>
 78a:	67 2f       	mov	r22, r23
 78c:	78 2f       	mov	r23, r24
 78e:	88 27       	eor	r24, r24
 790:	b8 5f       	subi	r27, 0xF8	; 248
 792:	39 f0       	breq	.+14     	; 0x7a2 <__fixunssfsi+0x46>
 794:	b9 3f       	cpi	r27, 0xF9	; 249
 796:	cc f3       	brlt	.-14     	; 0x78a <__fixunssfsi+0x2e>
 798:	86 95       	lsr	r24
 79a:	77 95       	ror	r23
 79c:	67 95       	ror	r22
 79e:	b3 95       	inc	r27
 7a0:	d9 f7       	brne	.-10     	; 0x798 <__fixunssfsi+0x3c>
 7a2:	3e f4       	brtc	.+14     	; 0x7b2 <__fixunssfsi+0x56>
 7a4:	90 95       	com	r25
 7a6:	80 95       	com	r24
 7a8:	70 95       	com	r23
 7aa:	61 95       	neg	r22
 7ac:	7f 4f       	sbci	r23, 0xFF	; 255
 7ae:	8f 4f       	sbci	r24, 0xFF	; 255
 7b0:	9f 4f       	sbci	r25, 0xFF	; 255
 7b2:	08 95       	ret

000007b4 <__floatunsisf>:
 7b4:	e8 94       	clt
 7b6:	09 c0       	rjmp	.+18     	; 0x7ca <__floatsisf+0x12>

000007b8 <__floatsisf>:
 7b8:	97 fb       	bst	r25, 7
 7ba:	3e f4       	brtc	.+14     	; 0x7ca <__floatsisf+0x12>
 7bc:	90 95       	com	r25
 7be:	80 95       	com	r24
 7c0:	70 95       	com	r23
 7c2:	61 95       	neg	r22
 7c4:	7f 4f       	sbci	r23, 0xFF	; 255
 7c6:	8f 4f       	sbci	r24, 0xFF	; 255
 7c8:	9f 4f       	sbci	r25, 0xFF	; 255
 7ca:	99 23       	and	r25, r25
 7cc:	a9 f0       	breq	.+42     	; 0x7f8 <__floatsisf+0x40>
 7ce:	f9 2f       	mov	r31, r25
 7d0:	96 e9       	ldi	r25, 0x96	; 150
 7d2:	bb 27       	eor	r27, r27
 7d4:	93 95       	inc	r25
 7d6:	f6 95       	lsr	r31
 7d8:	87 95       	ror	r24
 7da:	77 95       	ror	r23
 7dc:	67 95       	ror	r22
 7de:	b7 95       	ror	r27
 7e0:	f1 11       	cpse	r31, r1
 7e2:	f8 cf       	rjmp	.-16     	; 0x7d4 <__floatsisf+0x1c>
 7e4:	fa f4       	brpl	.+62     	; 0x824 <__floatsisf+0x6c>
 7e6:	bb 0f       	add	r27, r27
 7e8:	11 f4       	brne	.+4      	; 0x7ee <__floatsisf+0x36>
 7ea:	60 ff       	sbrs	r22, 0
 7ec:	1b c0       	rjmp	.+54     	; 0x824 <__floatsisf+0x6c>
 7ee:	6f 5f       	subi	r22, 0xFF	; 255
 7f0:	7f 4f       	sbci	r23, 0xFF	; 255
 7f2:	8f 4f       	sbci	r24, 0xFF	; 255
 7f4:	9f 4f       	sbci	r25, 0xFF	; 255
 7f6:	16 c0       	rjmp	.+44     	; 0x824 <__floatsisf+0x6c>
 7f8:	88 23       	and	r24, r24
 7fa:	11 f0       	breq	.+4      	; 0x800 <__floatsisf+0x48>
 7fc:	96 e9       	ldi	r25, 0x96	; 150
 7fe:	11 c0       	rjmp	.+34     	; 0x822 <__floatsisf+0x6a>
 800:	77 23       	and	r23, r23
 802:	21 f0       	breq	.+8      	; 0x80c <__floatsisf+0x54>
 804:	9e e8       	ldi	r25, 0x8E	; 142
 806:	87 2f       	mov	r24, r23
 808:	76 2f       	mov	r23, r22
 80a:	05 c0       	rjmp	.+10     	; 0x816 <__floatsisf+0x5e>
 80c:	66 23       	and	r22, r22
 80e:	71 f0       	breq	.+28     	; 0x82c <__floatsisf+0x74>
 810:	96 e8       	ldi	r25, 0x86	; 134
 812:	86 2f       	mov	r24, r22
 814:	70 e0       	ldi	r23, 0x00	; 0
 816:	60 e0       	ldi	r22, 0x00	; 0
 818:	2a f0       	brmi	.+10     	; 0x824 <__floatsisf+0x6c>
 81a:	9a 95       	dec	r25
 81c:	66 0f       	add	r22, r22
 81e:	77 1f       	adc	r23, r23
 820:	88 1f       	adc	r24, r24
 822:	da f7       	brpl	.-10     	; 0x81a <__floatsisf+0x62>
 824:	88 0f       	add	r24, r24
 826:	96 95       	lsr	r25
 828:	87 95       	ror	r24
 82a:	97 f9       	bld	r25, 7
 82c:	08 95       	ret

0000082e <__fp_inf>:
 82e:	97 f9       	bld	r25, 7
 830:	9f 67       	ori	r25, 0x7F	; 127
 832:	80 e8       	ldi	r24, 0x80	; 128
 834:	70 e0       	ldi	r23, 0x00	; 0
 836:	60 e0       	ldi	r22, 0x00	; 0
 838:	08 95       	ret

0000083a <__fp_nan>:
 83a:	9f ef       	ldi	r25, 0xFF	; 255
 83c:	80 ec       	ldi	r24, 0xC0	; 192
 83e:	08 95       	ret

00000840 <__fp_powser>:
 840:	df 93       	push	r29
 842:	cf 93       	push	r28
 844:	1f 93       	push	r17
 846:	0f 93       	push	r16
 848:	ff 92       	push	r15
 84a:	ef 92       	push	r14
 84c:	df 92       	push	r13
 84e:	7b 01       	movw	r14, r22
 850:	8c 01       	movw	r16, r24
 852:	68 94       	set
 854:	05 c0       	rjmp	.+10     	; 0x860 <__fp_powser+0x20>
 856:	da 2e       	mov	r13, r26
 858:	ef 01       	movw	r28, r30
 85a:	20 d1       	rcall	.+576    	; 0xa9c <__mulsf3x>
 85c:	fe 01       	movw	r30, r28
 85e:	e8 94       	clt
 860:	a5 91       	lpm	r26, Z+
 862:	25 91       	lpm	r18, Z+
 864:	35 91       	lpm	r19, Z+
 866:	45 91       	lpm	r20, Z+
 868:	55 91       	lpm	r21, Z+
 86a:	ae f3       	brts	.-22     	; 0x856 <__fp_powser+0x16>
 86c:	ef 01       	movw	r28, r30
 86e:	85 de       	rcall	.-758    	; 0x57a <__addsf3x>
 870:	fe 01       	movw	r30, r28
 872:	97 01       	movw	r18, r14
 874:	a8 01       	movw	r20, r16
 876:	da 94       	dec	r13
 878:	79 f7       	brne	.-34     	; 0x858 <__fp_powser+0x18>
 87a:	df 90       	pop	r13
 87c:	ef 90       	pop	r14
 87e:	ff 90       	pop	r15
 880:	0f 91       	pop	r16
 882:	1f 91       	pop	r17
 884:	cf 91       	pop	r28
 886:	df 91       	pop	r29
 888:	08 95       	ret

0000088a <__fp_pscA>:
 88a:	00 24       	eor	r0, r0
 88c:	0a 94       	dec	r0
 88e:	16 16       	cp	r1, r22
 890:	17 06       	cpc	r1, r23
 892:	18 06       	cpc	r1, r24
 894:	09 06       	cpc	r0, r25
 896:	08 95       	ret

00000898 <__fp_pscB>:
 898:	00 24       	eor	r0, r0
 89a:	0a 94       	dec	r0
 89c:	12 16       	cp	r1, r18
 89e:	13 06       	cpc	r1, r19
 8a0:	14 06       	cpc	r1, r20
 8a2:	05 06       	cpc	r0, r21
 8a4:	08 95       	ret

000008a6 <__fp_round>:
 8a6:	09 2e       	mov	r0, r25
 8a8:	03 94       	inc	r0
 8aa:	00 0c       	add	r0, r0
 8ac:	11 f4       	brne	.+4      	; 0x8b2 <__fp_round+0xc>
 8ae:	88 23       	and	r24, r24
 8b0:	52 f0       	brmi	.+20     	; 0x8c6 <__fp_round+0x20>
 8b2:	bb 0f       	add	r27, r27
 8b4:	40 f4       	brcc	.+16     	; 0x8c6 <__fp_round+0x20>
 8b6:	bf 2b       	or	r27, r31
 8b8:	11 f4       	brne	.+4      	; 0x8be <__fp_round+0x18>
 8ba:	60 ff       	sbrs	r22, 0
 8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__fp_round+0x20>
 8be:	6f 5f       	subi	r22, 0xFF	; 255
 8c0:	7f 4f       	sbci	r23, 0xFF	; 255
 8c2:	8f 4f       	sbci	r24, 0xFF	; 255
 8c4:	9f 4f       	sbci	r25, 0xFF	; 255
 8c6:	08 95       	ret

000008c8 <__fp_split3>:
 8c8:	57 fd       	sbrc	r21, 7
 8ca:	90 58       	subi	r25, 0x80	; 128
 8cc:	44 0f       	add	r20, r20
 8ce:	55 1f       	adc	r21, r21
 8d0:	59 f0       	breq	.+22     	; 0x8e8 <__fp_splitA+0x10>
 8d2:	5f 3f       	cpi	r21, 0xFF	; 255
 8d4:	71 f0       	breq	.+28     	; 0x8f2 <__fp_splitA+0x1a>
 8d6:	47 95       	ror	r20

000008d8 <__fp_splitA>:
 8d8:	88 0f       	add	r24, r24
 8da:	97 fb       	bst	r25, 7
 8dc:	99 1f       	adc	r25, r25
 8de:	61 f0       	breq	.+24     	; 0x8f8 <__fp_splitA+0x20>
 8e0:	9f 3f       	cpi	r25, 0xFF	; 255
 8e2:	79 f0       	breq	.+30     	; 0x902 <__fp_splitA+0x2a>
 8e4:	87 95       	ror	r24
 8e6:	08 95       	ret
 8e8:	12 16       	cp	r1, r18
 8ea:	13 06       	cpc	r1, r19
 8ec:	14 06       	cpc	r1, r20
 8ee:	55 1f       	adc	r21, r21
 8f0:	f2 cf       	rjmp	.-28     	; 0x8d6 <__fp_split3+0xe>
 8f2:	46 95       	lsr	r20
 8f4:	f1 df       	rcall	.-30     	; 0x8d8 <__fp_splitA>
 8f6:	08 c0       	rjmp	.+16     	; 0x908 <__fp_splitA+0x30>
 8f8:	16 16       	cp	r1, r22
 8fa:	17 06       	cpc	r1, r23
 8fc:	18 06       	cpc	r1, r24
 8fe:	99 1f       	adc	r25, r25
 900:	f1 cf       	rjmp	.-30     	; 0x8e4 <__fp_splitA+0xc>
 902:	86 95       	lsr	r24
 904:	71 05       	cpc	r23, r1
 906:	61 05       	cpc	r22, r1
 908:	08 94       	sec
 90a:	08 95       	ret

0000090c <__fp_zero>:
 90c:	e8 94       	clt

0000090e <__fp_szero>:
 90e:	bb 27       	eor	r27, r27
 910:	66 27       	eor	r22, r22
 912:	77 27       	eor	r23, r23
 914:	cb 01       	movw	r24, r22
 916:	97 f9       	bld	r25, 7
 918:	08 95       	ret

0000091a <inverse>:
 91a:	9b 01       	movw	r18, r22
 91c:	ac 01       	movw	r20, r24
 91e:	60 e0       	ldi	r22, 0x00	; 0
 920:	70 e0       	ldi	r23, 0x00	; 0
 922:	80 e8       	ldi	r24, 0x80	; 128
 924:	9f e3       	ldi	r25, 0x3F	; 63
 926:	7c ce       	rjmp	.-776    	; 0x620 <__divsf3>
 928:	82 cf       	rjmp	.-252    	; 0x82e <__fp_inf>
 92a:	5b c1       	rjmp	.+694    	; 0xbe2 <__fp_mpack>

0000092c <ldexp>:
 92c:	d5 df       	rcall	.-86     	; 0x8d8 <__fp_splitA>
 92e:	e8 f3       	brcs	.-6      	; 0x92a <inverse+0x10>
 930:	99 23       	and	r25, r25
 932:	d9 f3       	breq	.-10     	; 0x92a <inverse+0x10>
 934:	94 0f       	add	r25, r20
 936:	51 1d       	adc	r21, r1
 938:	bb f3       	brvs	.-18     	; 0x928 <inverse+0xe>
 93a:	91 50       	subi	r25, 0x01	; 1
 93c:	50 40       	sbci	r21, 0x00	; 0
 93e:	94 f0       	brlt	.+36     	; 0x964 <ldexp+0x38>
 940:	59 f0       	breq	.+22     	; 0x958 <ldexp+0x2c>
 942:	88 23       	and	r24, r24
 944:	32 f0       	brmi	.+12     	; 0x952 <ldexp+0x26>
 946:	66 0f       	add	r22, r22
 948:	77 1f       	adc	r23, r23
 94a:	88 1f       	adc	r24, r24
 94c:	91 50       	subi	r25, 0x01	; 1
 94e:	50 40       	sbci	r21, 0x00	; 0
 950:	c1 f7       	brne	.-16     	; 0x942 <ldexp+0x16>
 952:	9e 3f       	cpi	r25, 0xFE	; 254
 954:	51 05       	cpc	r21, r1
 956:	44 f7       	brge	.-48     	; 0x928 <inverse+0xe>
 958:	88 0f       	add	r24, r24
 95a:	91 1d       	adc	r25, r1
 95c:	96 95       	lsr	r25
 95e:	87 95       	ror	r24
 960:	97 f9       	bld	r25, 7
 962:	08 95       	ret
 964:	5f 3f       	cpi	r21, 0xFF	; 255
 966:	ac f0       	brlt	.+42     	; 0x992 <ldexp+0x66>
 968:	98 3e       	cpi	r25, 0xE8	; 232
 96a:	9c f0       	brlt	.+38     	; 0x992 <ldexp+0x66>
 96c:	bb 27       	eor	r27, r27
 96e:	86 95       	lsr	r24
 970:	77 95       	ror	r23
 972:	67 95       	ror	r22
 974:	b7 95       	ror	r27
 976:	08 f4       	brcc	.+2      	; 0x97a <ldexp+0x4e>
 978:	b1 60       	ori	r27, 0x01	; 1
 97a:	93 95       	inc	r25
 97c:	c1 f7       	brne	.-16     	; 0x96e <ldexp+0x42>
 97e:	bb 0f       	add	r27, r27
 980:	58 f7       	brcc	.-42     	; 0x958 <ldexp+0x2c>
 982:	11 f4       	brne	.+4      	; 0x988 <ldexp+0x5c>
 984:	60 ff       	sbrs	r22, 0
 986:	e8 cf       	rjmp	.-48     	; 0x958 <ldexp+0x2c>
 988:	6f 5f       	subi	r22, 0xFF	; 255
 98a:	7f 4f       	sbci	r23, 0xFF	; 255
 98c:	8f 4f       	sbci	r24, 0xFF	; 255
 98e:	9f 4f       	sbci	r25, 0xFF	; 255
 990:	e3 cf       	rjmp	.-58     	; 0x958 <ldexp+0x2c>
 992:	bd cf       	rjmp	.-134    	; 0x90e <__fp_szero>
 994:	0e f0       	brts	.+2      	; 0x998 <ldexp+0x6c>
 996:	25 c1       	rjmp	.+586    	; 0xbe2 <__fp_mpack>
 998:	50 cf       	rjmp	.-352    	; 0x83a <__fp_nan>
 99a:	68 94       	set
 99c:	48 cf       	rjmp	.-368    	; 0x82e <__fp_inf>

0000099e <log>:
 99e:	9c df       	rcall	.-200    	; 0x8d8 <__fp_splitA>
 9a0:	c8 f3       	brcs	.-14     	; 0x994 <ldexp+0x68>
 9a2:	99 23       	and	r25, r25
 9a4:	d1 f3       	breq	.-12     	; 0x99a <ldexp+0x6e>
 9a6:	c6 f3       	brts	.-16     	; 0x998 <ldexp+0x6c>
 9a8:	df 93       	push	r29
 9aa:	cf 93       	push	r28
 9ac:	1f 93       	push	r17
 9ae:	0f 93       	push	r16
 9b0:	ff 92       	push	r15
 9b2:	c9 2f       	mov	r28, r25
 9b4:	dd 27       	eor	r29, r29
 9b6:	88 23       	and	r24, r24
 9b8:	2a f0       	brmi	.+10     	; 0x9c4 <log+0x26>
 9ba:	21 97       	sbiw	r28, 0x01	; 1
 9bc:	66 0f       	add	r22, r22
 9be:	77 1f       	adc	r23, r23
 9c0:	88 1f       	adc	r24, r24
 9c2:	da f7       	brpl	.-10     	; 0x9ba <log+0x1c>
 9c4:	20 e0       	ldi	r18, 0x00	; 0
 9c6:	30 e0       	ldi	r19, 0x00	; 0
 9c8:	40 e8       	ldi	r20, 0x80	; 128
 9ca:	5f eb       	ldi	r21, 0xBF	; 191
 9cc:	9f e3       	ldi	r25, 0x3F	; 63
 9ce:	88 39       	cpi	r24, 0x98	; 152
 9d0:	20 f0       	brcs	.+8      	; 0x9da <log+0x3c>
 9d2:	80 3e       	cpi	r24, 0xE0	; 224
 9d4:	30 f0       	brcs	.+12     	; 0x9e2 <log+0x44>
 9d6:	21 96       	adiw	r28, 0x01	; 1
 9d8:	8f 77       	andi	r24, 0x7F	; 127
 9da:	be dd       	rcall	.-1156   	; 0x558 <__addsf3>
 9dc:	ec e0       	ldi	r30, 0x0C	; 12
 9de:	f1 e0       	ldi	r31, 0x01	; 1
 9e0:	03 c0       	rjmp	.+6      	; 0x9e8 <log+0x4a>
 9e2:	ba dd       	rcall	.-1164   	; 0x558 <__addsf3>
 9e4:	e9 e3       	ldi	r30, 0x39	; 57
 9e6:	f1 e0       	ldi	r31, 0x01	; 1
 9e8:	2b df       	rcall	.-426    	; 0x840 <__fp_powser>
 9ea:	8b 01       	movw	r16, r22
 9ec:	be 01       	movw	r22, r28
 9ee:	ec 01       	movw	r28, r24
 9f0:	fb 2e       	mov	r15, r27
 9f2:	6f 57       	subi	r22, 0x7F	; 127
 9f4:	71 09       	sbc	r23, r1
 9f6:	75 95       	asr	r23
 9f8:	77 1f       	adc	r23, r23
 9fa:	88 0b       	sbc	r24, r24
 9fc:	99 0b       	sbc	r25, r25
 9fe:	dc de       	rcall	.-584    	; 0x7b8 <__floatsisf>
 a00:	28 e1       	ldi	r18, 0x18	; 24
 a02:	32 e7       	ldi	r19, 0x72	; 114
 a04:	41 e3       	ldi	r20, 0x31	; 49
 a06:	5f e3       	ldi	r21, 0x3F	; 63
 a08:	49 d0       	rcall	.+146    	; 0xa9c <__mulsf3x>
 a0a:	af 2d       	mov	r26, r15
 a0c:	98 01       	movw	r18, r16
 a0e:	ae 01       	movw	r20, r28
 a10:	ff 90       	pop	r15
 a12:	0f 91       	pop	r16
 a14:	1f 91       	pop	r17
 a16:	cf 91       	pop	r28
 a18:	df 91       	pop	r29
 a1a:	af dd       	rcall	.-1186   	; 0x57a <__addsf3x>
 a1c:	44 cf       	rjmp	.-376    	; 0x8a6 <__fp_round>

00000a1e <modf>:
 a1e:	fa 01       	movw	r30, r20
 a20:	dc 01       	movw	r26, r24
 a22:	aa 0f       	add	r26, r26
 a24:	bb 1f       	adc	r27, r27
 a26:	9b 01       	movw	r18, r22
 a28:	ac 01       	movw	r20, r24
 a2a:	bf 57       	subi	r27, 0x7F	; 127
 a2c:	28 f4       	brcc	.+10     	; 0xa38 <modf+0x1a>
 a2e:	22 27       	eor	r18, r18
 a30:	33 27       	eor	r19, r19
 a32:	44 27       	eor	r20, r20
 a34:	50 78       	andi	r21, 0x80	; 128
 a36:	1f c0       	rjmp	.+62     	; 0xa76 <modf+0x58>
 a38:	b7 51       	subi	r27, 0x17	; 23
 a3a:	88 f4       	brcc	.+34     	; 0xa5e <modf+0x40>
 a3c:	ab 2f       	mov	r26, r27
 a3e:	00 24       	eor	r0, r0
 a40:	46 95       	lsr	r20
 a42:	37 95       	ror	r19
 a44:	27 95       	ror	r18
 a46:	01 1c       	adc	r0, r1
 a48:	a3 95       	inc	r26
 a4a:	d2 f3       	brmi	.-12     	; 0xa40 <modf+0x22>
 a4c:	00 20       	and	r0, r0
 a4e:	69 f0       	breq	.+26     	; 0xa6a <modf+0x4c>
 a50:	22 0f       	add	r18, r18
 a52:	33 1f       	adc	r19, r19
 a54:	44 1f       	adc	r20, r20
 a56:	b3 95       	inc	r27
 a58:	da f3       	brmi	.-10     	; 0xa50 <modf+0x32>
 a5a:	0d d0       	rcall	.+26     	; 0xa76 <modf+0x58>
 a5c:	7c cd       	rjmp	.-1288   	; 0x556 <__subsf3>
 a5e:	61 30       	cpi	r22, 0x01	; 1
 a60:	71 05       	cpc	r23, r1
 a62:	a0 e8       	ldi	r26, 0x80	; 128
 a64:	8a 07       	cpc	r24, r26
 a66:	b9 46       	sbci	r27, 0x69	; 105
 a68:	30 f4       	brcc	.+12     	; 0xa76 <modf+0x58>
 a6a:	9b 01       	movw	r18, r22
 a6c:	ac 01       	movw	r20, r24
 a6e:	66 27       	eor	r22, r22
 a70:	77 27       	eor	r23, r23
 a72:	88 27       	eor	r24, r24
 a74:	90 78       	andi	r25, 0x80	; 128
 a76:	30 96       	adiw	r30, 0x00	; 0
 a78:	21 f0       	breq	.+8      	; 0xa82 <modf+0x64>
 a7a:	20 83       	st	Z, r18
 a7c:	31 83       	std	Z+1, r19	; 0x01
 a7e:	42 83       	std	Z+2, r20	; 0x02
 a80:	53 83       	std	Z+3, r21	; 0x03
 a82:	08 95       	ret

00000a84 <__mulsf3>:
 a84:	0b d0       	rcall	.+22     	; 0xa9c <__mulsf3x>
 a86:	0f cf       	rjmp	.-482    	; 0x8a6 <__fp_round>
 a88:	00 df       	rcall	.-512    	; 0x88a <__fp_pscA>
 a8a:	28 f0       	brcs	.+10     	; 0xa96 <__mulsf3+0x12>
 a8c:	05 df       	rcall	.-502    	; 0x898 <__fp_pscB>
 a8e:	18 f0       	brcs	.+6      	; 0xa96 <__mulsf3+0x12>
 a90:	95 23       	and	r25, r21
 a92:	09 f0       	breq	.+2      	; 0xa96 <__mulsf3+0x12>
 a94:	cc ce       	rjmp	.-616    	; 0x82e <__fp_inf>
 a96:	d1 ce       	rjmp	.-606    	; 0x83a <__fp_nan>
 a98:	11 24       	eor	r1, r1
 a9a:	39 cf       	rjmp	.-398    	; 0x90e <__fp_szero>

00000a9c <__mulsf3x>:
 a9c:	15 df       	rcall	.-470    	; 0x8c8 <__fp_split3>
 a9e:	a0 f3       	brcs	.-24     	; 0xa88 <__mulsf3+0x4>

00000aa0 <__mulsf3_pse>:
 aa0:	95 9f       	mul	r25, r21
 aa2:	d1 f3       	breq	.-12     	; 0xa98 <__mulsf3+0x14>
 aa4:	95 0f       	add	r25, r21
 aa6:	50 e0       	ldi	r21, 0x00	; 0
 aa8:	55 1f       	adc	r21, r21
 aaa:	62 9f       	mul	r22, r18
 aac:	f0 01       	movw	r30, r0
 aae:	72 9f       	mul	r23, r18
 ab0:	bb 27       	eor	r27, r27
 ab2:	f0 0d       	add	r31, r0
 ab4:	b1 1d       	adc	r27, r1
 ab6:	63 9f       	mul	r22, r19
 ab8:	aa 27       	eor	r26, r26
 aba:	f0 0d       	add	r31, r0
 abc:	b1 1d       	adc	r27, r1
 abe:	aa 1f       	adc	r26, r26
 ac0:	64 9f       	mul	r22, r20
 ac2:	66 27       	eor	r22, r22
 ac4:	b0 0d       	add	r27, r0
 ac6:	a1 1d       	adc	r26, r1
 ac8:	66 1f       	adc	r22, r22
 aca:	82 9f       	mul	r24, r18
 acc:	22 27       	eor	r18, r18
 ace:	b0 0d       	add	r27, r0
 ad0:	a1 1d       	adc	r26, r1
 ad2:	62 1f       	adc	r22, r18
 ad4:	73 9f       	mul	r23, r19
 ad6:	b0 0d       	add	r27, r0
 ad8:	a1 1d       	adc	r26, r1
 ada:	62 1f       	adc	r22, r18
 adc:	83 9f       	mul	r24, r19
 ade:	a0 0d       	add	r26, r0
 ae0:	61 1d       	adc	r22, r1
 ae2:	22 1f       	adc	r18, r18
 ae4:	74 9f       	mul	r23, r20
 ae6:	33 27       	eor	r19, r19
 ae8:	a0 0d       	add	r26, r0
 aea:	61 1d       	adc	r22, r1
 aec:	23 1f       	adc	r18, r19
 aee:	84 9f       	mul	r24, r20
 af0:	60 0d       	add	r22, r0
 af2:	21 1d       	adc	r18, r1
 af4:	82 2f       	mov	r24, r18
 af6:	76 2f       	mov	r23, r22
 af8:	6a 2f       	mov	r22, r26
 afa:	11 24       	eor	r1, r1
 afc:	9f 57       	subi	r25, 0x7F	; 127
 afe:	50 40       	sbci	r21, 0x00	; 0
 b00:	8a f0       	brmi	.+34     	; 0xb24 <__mulsf3_pse+0x84>
 b02:	e1 f0       	breq	.+56     	; 0xb3c <__mulsf3_pse+0x9c>
 b04:	88 23       	and	r24, r24
 b06:	4a f0       	brmi	.+18     	; 0xb1a <__mulsf3_pse+0x7a>
 b08:	ee 0f       	add	r30, r30
 b0a:	ff 1f       	adc	r31, r31
 b0c:	bb 1f       	adc	r27, r27
 b0e:	66 1f       	adc	r22, r22
 b10:	77 1f       	adc	r23, r23
 b12:	88 1f       	adc	r24, r24
 b14:	91 50       	subi	r25, 0x01	; 1
 b16:	50 40       	sbci	r21, 0x00	; 0
 b18:	a9 f7       	brne	.-22     	; 0xb04 <__mulsf3_pse+0x64>
 b1a:	9e 3f       	cpi	r25, 0xFE	; 254
 b1c:	51 05       	cpc	r21, r1
 b1e:	70 f0       	brcs	.+28     	; 0xb3c <__mulsf3_pse+0x9c>
 b20:	86 ce       	rjmp	.-756    	; 0x82e <__fp_inf>
 b22:	f5 ce       	rjmp	.-534    	; 0x90e <__fp_szero>
 b24:	5f 3f       	cpi	r21, 0xFF	; 255
 b26:	ec f3       	brlt	.-6      	; 0xb22 <__mulsf3_pse+0x82>
 b28:	98 3e       	cpi	r25, 0xE8	; 232
 b2a:	dc f3       	brlt	.-10     	; 0xb22 <__mulsf3_pse+0x82>
 b2c:	86 95       	lsr	r24
 b2e:	77 95       	ror	r23
 b30:	67 95       	ror	r22
 b32:	b7 95       	ror	r27
 b34:	f7 95       	ror	r31
 b36:	e7 95       	ror	r30
 b38:	9f 5f       	subi	r25, 0xFF	; 255
 b3a:	c1 f7       	brne	.-16     	; 0xb2c <__mulsf3_pse+0x8c>
 b3c:	fe 2b       	or	r31, r30
 b3e:	88 0f       	add	r24, r24
 b40:	91 1d       	adc	r25, r1
 b42:	96 95       	lsr	r25
 b44:	87 95       	ror	r24
 b46:	97 f9       	bld	r25, 7
 b48:	08 95       	ret

00000b4a <pow>:
 b4a:	fa 01       	movw	r30, r20
 b4c:	ee 0f       	add	r30, r30
 b4e:	ff 1f       	adc	r31, r31
 b50:	30 96       	adiw	r30, 0x00	; 0
 b52:	21 05       	cpc	r18, r1
 b54:	31 05       	cpc	r19, r1
 b56:	99 f1       	breq	.+102    	; 0xbbe <pow+0x74>
 b58:	61 15       	cp	r22, r1
 b5a:	71 05       	cpc	r23, r1
 b5c:	61 f4       	brne	.+24     	; 0xb76 <pow+0x2c>
 b5e:	80 38       	cpi	r24, 0x80	; 128
 b60:	bf e3       	ldi	r27, 0x3F	; 63
 b62:	9b 07       	cpc	r25, r27
 b64:	49 f1       	breq	.+82     	; 0xbb8 <pow+0x6e>
 b66:	68 94       	set
 b68:	90 38       	cpi	r25, 0x80	; 128
 b6a:	81 05       	cpc	r24, r1
 b6c:	61 f0       	breq	.+24     	; 0xb86 <pow+0x3c>
 b6e:	80 38       	cpi	r24, 0x80	; 128
 b70:	bf ef       	ldi	r27, 0xFF	; 255
 b72:	9b 07       	cpc	r25, r27
 b74:	41 f0       	breq	.+16     	; 0xb86 <pow+0x3c>
 b76:	99 23       	and	r25, r25
 b78:	42 f5       	brpl	.+80     	; 0xbca <pow+0x80>
 b7a:	ff 3f       	cpi	r31, 0xFF	; 255
 b7c:	e1 05       	cpc	r30, r1
 b7e:	31 05       	cpc	r19, r1
 b80:	21 05       	cpc	r18, r1
 b82:	11 f1       	breq	.+68     	; 0xbc8 <pow+0x7e>
 b84:	e8 94       	clt
 b86:	08 94       	sec
 b88:	e7 95       	ror	r30
 b8a:	d9 01       	movw	r26, r18
 b8c:	aa 23       	and	r26, r26
 b8e:	29 f4       	brne	.+10     	; 0xb9a <pow+0x50>
 b90:	ab 2f       	mov	r26, r27
 b92:	be 2f       	mov	r27, r30
 b94:	f8 5f       	subi	r31, 0xF8	; 248
 b96:	d0 f3       	brcs	.-12     	; 0xb8c <pow+0x42>
 b98:	10 c0       	rjmp	.+32     	; 0xbba <pow+0x70>
 b9a:	ff 5f       	subi	r31, 0xFF	; 255
 b9c:	70 f4       	brcc	.+28     	; 0xbba <pow+0x70>
 b9e:	a6 95       	lsr	r26
 ba0:	e0 f7       	brcc	.-8      	; 0xb9a <pow+0x50>
 ba2:	f7 39       	cpi	r31, 0x97	; 151
 ba4:	50 f0       	brcs	.+20     	; 0xbba <pow+0x70>
 ba6:	19 f0       	breq	.+6      	; 0xbae <pow+0x64>
 ba8:	ff 3a       	cpi	r31, 0xAF	; 175
 baa:	38 f4       	brcc	.+14     	; 0xbba <pow+0x70>
 bac:	9f 77       	andi	r25, 0x7F	; 127
 bae:	9f 93       	push	r25
 bb0:	0c d0       	rcall	.+24     	; 0xbca <pow+0x80>
 bb2:	0f 90       	pop	r0
 bb4:	07 fc       	sbrc	r0, 7
 bb6:	90 58       	subi	r25, 0x80	; 128
 bb8:	08 95       	ret
 bba:	3e f0       	brts	.+14     	; 0xbca <pow+0x80>
 bbc:	3e ce       	rjmp	.-900    	; 0x83a <__fp_nan>
 bbe:	60 e0       	ldi	r22, 0x00	; 0
 bc0:	70 e0       	ldi	r23, 0x00	; 0
 bc2:	80 e8       	ldi	r24, 0x80	; 128
 bc4:	9f e3       	ldi	r25, 0x3F	; 63
 bc6:	08 95       	ret
 bc8:	4f e7       	ldi	r20, 0x7F	; 127
 bca:	9f 77       	andi	r25, 0x7F	; 127
 bcc:	5f 93       	push	r21
 bce:	4f 93       	push	r20
 bd0:	3f 93       	push	r19
 bd2:	2f 93       	push	r18
 bd4:	e4 de       	rcall	.-568    	; 0x99e <log>
 bd6:	2f 91       	pop	r18
 bd8:	3f 91       	pop	r19
 bda:	4f 91       	pop	r20
 bdc:	5f 91       	pop	r21
 bde:	52 df       	rcall	.-348    	; 0xa84 <__mulsf3>
 be0:	8c cd       	rjmp	.-1256   	; 0x6fa <exp>

00000be2 <__fp_mpack>:
 be2:	9f 3f       	cpi	r25, 0xFF	; 255
 be4:	31 f0       	breq	.+12     	; 0xbf2 <__fp_mpack_finite+0xc>

00000be6 <__fp_mpack_finite>:
 be6:	91 50       	subi	r25, 0x01	; 1
 be8:	20 f4       	brcc	.+8      	; 0xbf2 <__fp_mpack_finite+0xc>
 bea:	87 95       	ror	r24
 bec:	77 95       	ror	r23
 bee:	67 95       	ror	r22
 bf0:	b7 95       	ror	r27
 bf2:	88 0f       	add	r24, r24
 bf4:	91 1d       	adc	r25, r1
 bf6:	96 95       	lsr	r25
 bf8:	87 95       	ror	r24
 bfa:	97 f9       	bld	r25, 7
 bfc:	08 95       	ret

00000bfe <__udivmodsi4>:
 bfe:	a1 e2       	ldi	r26, 0x21	; 33
 c00:	1a 2e       	mov	r1, r26
 c02:	aa 1b       	sub	r26, r26
 c04:	bb 1b       	sub	r27, r27
 c06:	fd 01       	movw	r30, r26
 c08:	0d c0       	rjmp	.+26     	; 0xc24 <__udivmodsi4_ep>

00000c0a <__udivmodsi4_loop>:
 c0a:	aa 1f       	adc	r26, r26
 c0c:	bb 1f       	adc	r27, r27
 c0e:	ee 1f       	adc	r30, r30
 c10:	ff 1f       	adc	r31, r31
 c12:	a2 17       	cp	r26, r18
 c14:	b3 07       	cpc	r27, r19
 c16:	e4 07       	cpc	r30, r20
 c18:	f5 07       	cpc	r31, r21
 c1a:	20 f0       	brcs	.+8      	; 0xc24 <__udivmodsi4_ep>
 c1c:	a2 1b       	sub	r26, r18
 c1e:	b3 0b       	sbc	r27, r19
 c20:	e4 0b       	sbc	r30, r20
 c22:	f5 0b       	sbc	r31, r21

00000c24 <__udivmodsi4_ep>:
 c24:	66 1f       	adc	r22, r22
 c26:	77 1f       	adc	r23, r23
 c28:	88 1f       	adc	r24, r24
 c2a:	99 1f       	adc	r25, r25
 c2c:	1a 94       	dec	r1
 c2e:	69 f7       	brne	.-38     	; 0xc0a <__udivmodsi4_loop>
 c30:	60 95       	com	r22
 c32:	70 95       	com	r23
 c34:	80 95       	com	r24
 c36:	90 95       	com	r25
 c38:	9b 01       	movw	r18, r22
 c3a:	ac 01       	movw	r20, r24
 c3c:	bd 01       	movw	r22, r26
 c3e:	cf 01       	movw	r24, r30
 c40:	08 95       	ret

00000c42 <__itoa_ncheck>:
 c42:	bb 27       	eor	r27, r27
 c44:	4a 30       	cpi	r20, 0x0A	; 10
 c46:	31 f4       	brne	.+12     	; 0xc54 <__itoa_ncheck+0x12>
 c48:	99 23       	and	r25, r25
 c4a:	22 f4       	brpl	.+8      	; 0xc54 <__itoa_ncheck+0x12>
 c4c:	bd e2       	ldi	r27, 0x2D	; 45
 c4e:	90 95       	com	r25
 c50:	81 95       	neg	r24
 c52:	9f 4f       	sbci	r25, 0xFF	; 255
 c54:	01 c0       	rjmp	.+2      	; 0xc58 <__utoa_common>

00000c56 <__utoa_ncheck>:
 c56:	bb 27       	eor	r27, r27

00000c58 <__utoa_common>:
 c58:	fb 01       	movw	r30, r22
 c5a:	55 27       	eor	r21, r21
 c5c:	aa 27       	eor	r26, r26
 c5e:	88 0f       	add	r24, r24
 c60:	99 1f       	adc	r25, r25
 c62:	aa 1f       	adc	r26, r26
 c64:	a4 17       	cp	r26, r20
 c66:	10 f0       	brcs	.+4      	; 0xc6c <__utoa_common+0x14>
 c68:	a4 1b       	sub	r26, r20
 c6a:	83 95       	inc	r24
 c6c:	50 51       	subi	r21, 0x10	; 16
 c6e:	b9 f7       	brne	.-18     	; 0xc5e <__utoa_common+0x6>
 c70:	a0 5d       	subi	r26, 0xD0	; 208
 c72:	aa 33       	cpi	r26, 0x3A	; 58
 c74:	08 f0       	brcs	.+2      	; 0xc78 <__utoa_common+0x20>
 c76:	a9 5d       	subi	r26, 0xD9	; 217
 c78:	a1 93       	st	Z+, r26
 c7a:	00 97       	sbiw	r24, 0x00	; 0
 c7c:	79 f7       	brne	.-34     	; 0xc5c <__utoa_common+0x4>
 c7e:	b1 11       	cpse	r27, r1
 c80:	b1 93       	st	Z+, r27
 c82:	11 92       	st	Z+, r1
 c84:	cb 01       	movw	r24, r22
 c86:	00 c0       	rjmp	.+0      	; 0xc88 <strrev>

00000c88 <strrev>:
 c88:	dc 01       	movw	r26, r24
 c8a:	fc 01       	movw	r30, r24
 c8c:	67 2f       	mov	r22, r23
 c8e:	71 91       	ld	r23, Z+
 c90:	77 23       	and	r23, r23
 c92:	e1 f7       	brne	.-8      	; 0xc8c <strrev+0x4>
 c94:	32 97       	sbiw	r30, 0x02	; 2
 c96:	04 c0       	rjmp	.+8      	; 0xca0 <strrev+0x18>
 c98:	7c 91       	ld	r23, X
 c9a:	6d 93       	st	X+, r22
 c9c:	70 83       	st	Z, r23
 c9e:	62 91       	ld	r22, -Z
 ca0:	ae 17       	cp	r26, r30
 ca2:	bf 07       	cpc	r27, r31
 ca4:	c8 f3       	brcs	.-14     	; 0xc98 <strrev+0x10>
 ca6:	08 95       	ret

00000ca8 <_exit>:
 ca8:	f8 94       	cli

00000caa <__stop_program>:
 caa:	ff cf       	rjmp	.-2      	; 0xcaa <__stop_program>
